/**
 * 如何得到一个数据流中的中位数？
 * 如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值；
 * 如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。
 * 
 * 解决方案一：
 * 采用非排序数组，可以利用partition函数找出数组的中位数。
 * 插入复杂度O(1)，取中位数复杂度O(N)。
 * 解决方案二：
 * 采用排序数组，插入数据时保持数组排序。
 * 插入复杂度O(N)，取中位数复杂度O(1)。
 * 解决方案三：
 * 采用大根堆、小根堆实现。
 * 插入复杂度O(logn)，取中位数复杂度O(1)。
 * 保证大根堆的最大数 < 小根堆的最小数；
 * 两个堆中数据的数目之差 <= 1，为了实现平均分配，可以在数据的总数目是偶数时把新数据插入小根堆，奇数时插入大根堆。
 * 若当前读入数字num应插入小根堆，且num < 大根堆中某些数，此时应将num插入大根堆，并将大根堆的最大数插入小根堆；
 * 若当前读入数字num应插入大根堆，且num > 小根堆中某些数，此时应将num插入小根堆，并将小根堆的最小数插入大根堆。
 */

let arr = [];

function insert(num) {
  arr.push(num);
  arr.sort((a, b) => a - b);
}

function getMedian() {
  if (arr.length <= 0) {
    return;
  }
  let mid = arr.length >> 1;
  if (arr.length & 1) {
    return arr[mid];
  } else {
    return (arr[mid - 1] + arr[mid]) / 2;
  }
}

