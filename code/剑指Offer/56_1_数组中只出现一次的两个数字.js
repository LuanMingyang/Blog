/**
 * 一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。
 * 要求时间复杂度O(N)，空间复杂度O(1)。
 * 
 * 任何一个数字异或自己都等于0。
 * 如果只有一个数字只出现一次，则可以从头到尾依次异或数组中的每个数字，最终的结果刚好是那个只出现一次的数字。
 * 因此想到，可以尝试将数组分为两部分，使得每部分包含一个只出现一次的数字，这样就可以按照之前的思路分别找出两个只出现一次的数字。
 * 依旧从头到尾异或数组中的每个数字，最终得到的结果是两个只出现一次的数字的异或结果，因为两个数字不一样，因此异或的结果肯定不为0，即二进制表示中至少有一位是1；
 * 找到异或结果的二进制表示中的第一个1的位置，记为第n位；
 * 以第n位是否为1，把原数组分为两部分，第一部分的每个数字第n位都是1，第二部分的每个数字第n位都是0，这样两个只出现一次的数字一定分别在这两部分中；
 * 分别在两部分中找出只出现一次的数字。
 */

function findNumsAppearOnce(array) {
  if (!array || array.length < 2) {
    return;
  }

  let resXOR = array.reduce((prev, cur) => cur ^= prev);

  let indexOf1 = 0;
  while ((resXOR & 1) === 0) {
    resXOR >>= 1;
    indexOf1++;
  }

  let num1, num2;
  for (let i = 0; i < array.length; i++) {
    let num = array[i];
    if ((num >> indexOf1) & 1) {
      num1 ^= num;
    } else {
      num2 ^= num;
    }
  }
  return [num1, num2];
}